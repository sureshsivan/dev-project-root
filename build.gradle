import java.text.SimpleDateFormat
Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('dd-MMM-yyyy').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('hh:mm aa z').format(buildTimeAndDate)
}
//task platformBuild(dependsOn: [project(':coreProject').build]){
//    description : "Makes build only for the platform Projects"
//}
//https://github.com/hibernate/hibernate-orm/blob/master/dev-project-my-proj.gradle
//https://github.com/hibernate/hibernate-orm/blob/master/settings.gradle
//https://github.com/spring-projects/spring-framework/blob/master/dev-project-my-proj.gradle
//https://github.com/groovy/groovy-core/tree/master/subprojects
//https://github.com/groovy/groovy-core/tree/master/subprojects
//https://github.com/gradle/gradle/blob/master/settings.gradle#L55
//https://github.com/Qi4j/qi4j-core
//https://github.com/mockito/mockito
//apply plugin: 'eclipse'
//apply plugin: 'idea'

version = projectVersion
subprojects {   eachProject ->
    //  No Need to Apply these plugins and other tasks for Parent Projects
    if(eachProject.childProjects.size() == 0){
        apply plugin: 'java'
        apply from: "${rootProject.projectDir}/${mavenPublishGradleFileLoc}"
        group = projectGroupId
        repositories {
            mavenLocal()
            mavenCentral()
            maven {
                credentials {
                    username mavenTestRepoUsername
                    password mavenTestRepoPassword
                }
                url mavenTestRepoUrl
            }
        }
        task buildWithPublish(dependsOn: ['clean', 'build', 'javadoc', 'publishToMavenLocal', 'publish']){
        }
        dependencies {
            testCompile group: 'junit', name: 'junit', version: '4.11'
        }
    } else {
        println "=========================================================="
        println "SKIPPED \"${project.name}\" Since It is a Parent Project"
        println "=========================================================="
    }
}
